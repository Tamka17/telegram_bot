// handlers/admin.go
package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"telegram_bot/models"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *Handler) AddTask(ctx context.Context, update tgbotapi.Update) {
	if !h.IsAdmin(update.Message.From.ID) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		h.Bot.Send(msg)
		return
	}

	// –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "/addtask –æ–ø–∏—Å–∞–Ω–∏–µ|—Å—Å—ã–ª–∫–∞"
	msgParts := strings.SplitN(update.Message.Text, " ", 2)
	if len(msgParts) != 2 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addtask –æ–ø–∏—Å–∞–Ω–∏–µ|—Å—Å—ã–ª–∫–∞")
		h.Bot.Send(msg)
		return
	}

	taskParts := strings.SplitN(msgParts[1], "|", 2)
	if len(taskParts) != 2 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addtask –æ–ø–∏—Å–∞–Ω–∏–µ|—Å—Å—ã–ª–∫–∞")
		h.Bot.Send(msg)
		return
	}

	description := taskParts[0]
	link := taskParts[1]

	_, err := h.DB.ExecContext(ctx, "INSERT INTO tasks (description, link) VALUES ($1, $2)", description, link)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.")
		h.Bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
	h.Bot.Send(msg)
}

func (h *Handler) ViewCompletedTasks(ctx context.Context, update tgbotapi.Update) {
	if !h.IsAdmin(update.Message.From.ID) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		h.Bot.Send(msg)
		return
	}

	rows, err := h.DB.QueryContext(ctx, `
        SELECT users.username, tasks.description, user_tasks.status, user_tasks.screenshots, user_tasks.id
        FROM user_tasks
        JOIN users ON user_tasks.user_id = users.id
        JOIN tasks ON user_tasks.task_id = tasks.id
        WHERE user_tasks.status = 'completed'
    `)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.")
		h.Bot.Send(msg)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var username, description, status string
		var screenshotsData []byte
		var userTaskID int
		err := rows.Scan(&username, &description, &status, &screenshotsData, &userTaskID)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:", err)
			continue
		}

		var screenshots []string
		err = json.Unmarshal(screenshotsData, &screenshots)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:", err)
			continue
		}

		response := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–ó–∞–¥–∞–Ω–∏–µ: %s\n–°—Ç–∞—Ç—É—Å: %s\n", username, description, status)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
		go func() {
			h.Bot.Send(msg)
		}()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
		for _, screenshot := range screenshots {
			photoMsg := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL(screenshot))
			h.Bot.Send(photoMsg)
		}
	}
}

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
func (h *Handler) HandleAdminCommands(ctx context.Context, update tgbotapi.Update) {
	if !h.IsAdmin(update.Message.From.ID) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		h.Bot.Send(msg)
		return
	}

	text := update.Message.Text
	if strings.HasPrefix(text, "/addtask") {
		h.AddTask(ctx, update)
	} else if text == "/viewcompletedtasks" {
		h.ViewCompletedTasks(ctx, update)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞.")
		h.Bot.Send(msg)
	}
}

func (h *Handler) HandleAdminAddTask(ctx context.Context, update tgbotapi.Update) {
	// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ê–≤–∏—Ç–æ"),
			tgbotapi.NewKeyboardButton("–Ø–Ω–¥–µ–∫—Å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ì—É–≥–ª"),
			tgbotapi.NewKeyboardButton("2GIS"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"),
		),
	)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
	msg.ReplyMarkup = keyboard
	h.Bot.Send(msg)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	h.DB.SetUserState(context.Background(), update.Message.From.ID, "awaiting_task_category")
}

func (h *Handler) HandleAdminTaskCategorySelection(ctx context.Context, update tgbotapi.Update) {
	category := update.Message.Text

	if category == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
		msg.ReplyMarkup = h.AdminMenu
		h.Bot.Send(msg)
		h.DB.SetUserState(ctx, update.Message.From.ID, "")
		return
	}
	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	h.DB.SetTempData(ctx, update.Message.From.ID, "new_task_category", category)

	// –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	h.Bot.Send(msg)

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	h.DB.SetUserState(ctx, update.Message.From.ID, "awaiting_task_description")
}

func (h *Handler) HandleAdminTaskDescriptionReceived(ctx context.Context, update tgbotapi.Update) {
	description := update.Message.Text
	adminID := update.Message.From.ID

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	category, err := h.DB.GetTempData(ctx, adminID, "new_task_category")
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		if _, err := h.Bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ interface{} –∫ string
	categoryStr, ok := category.(string)
	if !ok {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
		if _, err := h.Bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	newTask := models.Task{
		Category:    categoryStr,
		Description: description,
		IsActive:    true,
		CreatedAt:   time.Now().Format("2006-01-02 15:04:05"),
		// –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è...
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = h.DB.CreateTask(ctx, &newTask)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		if _, err := h.Bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
	msg.ReplyMarkup = h.AdminMenu
	if _, err := h.Bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if err := h.DB.SetUserState(ctx, adminID, ""); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}
	if err := h.DB.DeleteTempData(ctx, adminID, "new_task_category"); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
}

func (h *Handler) HandleAdminCheckTasks(ctx context.Context, update tgbotapi.Update) {
	tasks, err := h.DB.GetPendingTasks(ctx) // –ó–∞–¥–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "Pending"
	if err != nil || len(tasks) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
		h.Bot.Send(msg)
		return
	}

	for _, task := range tasks {
		taskInfo := fmt.Sprintf(
			"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* %d\n"+
				"üìÑ *–ó–∞–¥–∞–Ω–∏–µ:* %s\n"+
				"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* %s",
			task.ID,
			task.Category,
			task.Description,
		)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, taskInfo)
		msg.ParseMode = "Markdown"

		// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
		approveButton := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", fmt.Sprintf("approve_%d", task.ID))
		rejectButton := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_%d", task.ID))
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(approveButton, rejectButton),
		)
		msg.ReplyMarkup = &keyboard

		h.Bot.Send(msg)
	}
}
