// handlers/admin.go
package handlers

import (
	"context"
	"fmt"
	"log"
	"telegram_bot/models"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *Handler) HandleAdminAddTask(ctx context.Context, update tgbotapi.Update) {
	// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
	userID := update.Message.From.ID
	msgKeyboard := h.AdminMenuTask
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
	msg.ReplyMarkup = msgKeyboard
	h.Bot.Send(msg)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	err := h.DB.SetUserState(ctx, userID, string(models.StateAwaitingTaskCategory))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
		h.Bot.Send(msg)
	}
}

func (h *Handler) HandleAdminTaskCategorySelection(ctx context.Context, update tgbotapi.Update) {
	categoryText := update.Message.Text
	adminID := update.Message.From.ID

	if categoryText == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
		msg.ReplyMarkup = h.AdminMenuTask
		h.Bot.Send(msg)
		h.DB.SetUserState(ctx, adminID, string(models.StateNone))
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var selectedCategory models.Category
	switch categoryText {
	case string(models.CategoryAvito):
		selectedCategory = models.CategoryAvito
	case string(models.CategoryYandex):
		selectedCategory = models.CategoryYandex
	case string(models.CategoryGoogle):
		selectedCategory = models.CategoryGoogle
	case string(models.Category2GIS):
		selectedCategory = models.Category2GIS
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
		msg.ReplyMarkup = h.AdminMenuTask // –ò–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
		h.Bot.Send(msg)
		return
	}
	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	err := h.DB.SetTempData(ctx, update.Message.From.ID, "new_task_category", selectedCategory)
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")
		h.Bot.Send(msg)
		return
	}

	// –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	h.Bot.Send(msg)

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	h.DB.SetUserState(ctx, update.Message.From.ID, string(models.StateAwaitingTaskDescription))
}

func (h *Handler) HandleAdminTaskDescription(ctx context.Context, update tgbotapi.Update) {
	description := update.Message.Text
	adminID := update.Message.From.ID

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	tempData, err := h.DB.GetTempData(ctx, adminID, "new_task_category")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")
		h.Bot.Send(msg)
		return
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ interface{} –∫ string
	selectedCategory, ok := tempData.(models.Category)
	if !ok {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
		if _, err := h.Bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	task := models.Task{
		Category:         selectedCategory,
		Description:      description,
		Link:             "https://example.com",
		IsActive:         true,
		CreatedAt:        time.Now(),
		Status:           "New",
		ScreenshotFileID: "file_id_12345",
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = h.DB.CreateTask(ctx, &task)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
		h.Bot.Send(msg)
		return
	}

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
	msg.ReplyMarkup = h.AdminMenuTask
	if _, err := h.Bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if err := h.DB.SetUserState(ctx, adminID, ""); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}
	if err := h.DB.DeleteTempData(ctx, adminID, "new_task_category"); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
}

func (h *Handler) HandleAdminCheckTasks(ctx context.Context, update tgbotapi.Update) {
	tasks, err := h.DB.GetPendingTasks(ctx) // –ó–∞–¥–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "Pending"
	if err != nil {
		h.Bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."))
		return
	}

	if len(tasks) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
		h.Bot.Send(msg)
		return
	}

	for _, task := range tasks {
		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏
		taskInfo := fmt.Sprintf(
			"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:* %d\n"+
				"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* %s\n"+
				"üìÑ *–ó–∞–¥–∞–Ω–∏–µ:* %s\n"+
				"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n"+
				"üîó *–°—Å—ã–ª–∫–∞:* %s\n"+
				"üìÖ *–°–æ–∑–¥–∞–Ω–æ:* %s\n",
			task.UserID,
			task.Category,
			task.ID, // –ï—Å–ª–∏ ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å
			task.Description,
			task.Link,
			task.CreatedAt.Format("2006-01-02 15:04:05"),
		)
		// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
		approveButton := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", fmt.Sprintf("approve_%d", task.ID))
		rejectButton := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_%d", task.ID))
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(approveButton, rejectButton),
		)

		// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
		photoMsg := tgbotapi.NewPhoto(
			update.Message.Chat.ID,
			tgbotapi.FileID(task.ScreenshotFileID), // –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
		)
		photoMsg.Caption = taskInfo
		photoMsg.ParseMode = "Markdown"
		photoMsg.ReplyMarkup = keyboard

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		if _, err := h.Bot.Send(photoMsg); err != nil {
			// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
			fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ID %d: %v\n", task.ID, err)
		}
	}
}
